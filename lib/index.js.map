{"version":3,"sources":["index.js"],"names":["EventManager","_events","_once","field","name","events","callbacks","concat","_onFrom","length","i","j","indexOf","splice","_offFrom","result","args","r","_callEventsFrom","_callRegularEvents","_callOnceEvents","fire","on","off"],"mappings":"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","file":"index.js","sourcesContent":["\r\n/**\r\n * The event manager is a class than can dispatche messages assigned to it.\r\n * It works great as a flux dispatcher os as an event listener.\r\n * This class aims to be used in composition or extension with others.\r\n */\r\nclass EventManager {\r\n  \r\n  /**\r\n   * Creates a new event manager.\r\n   */\r\n  constructor() {\r\n    /** This events are events than are called always when this event manager dispatchs it */\r\n    this._events = {};\r\n    /** This events are special, because they are called just once, and after that they are ignored. */\r\n    this._once   = {};\r\n  }\r\n  \r\n  /**\r\n   * Adds one or more callback to listen for an event.\r\n   * @param {string} field The variable name.\r\n   * @param {string} name The name of the callback.\r\n   * @param {function[]} callbacks A list of callbacks to add\r\n   * @private\r\n   */\r\n  _onFrom(field, name, ...callbacks) {\r\n    let events = this[field];\r\n    events[name] = events[name] || [];\r\n    events[name] = events[name].concat(callbacks);\r\n  }\r\n\r\n  /**\r\n   * Adds one or more callback to listen for an event.\r\n   * @param {string} name The name of the callback.\r\n   * @param {function[]} callbacks A list of callbacks to add\r\n   */\r\n  on(name, ...callbacks) {\r\n    this._onFrom('_events', name, ...callbacks);\r\n  }\r\n  \r\n   /**\r\n   * Adds one or more callback to listen for an event.\r\n   * This event will be only called once.\r\n   * @param {string} name The name of the callback.\r\n   * @param {function[]} callbacks A list of callbacks to add\r\n   */\r\n  once(name, ...callbacks) {\r\n    this._onFrom('_once', name, ...callbacks);\r\n  }\r\n\r\n  /**\r\n   * Removes callbacks from an event.\r\n   * @param { string } field The field name \r\n   * @param { string } name The event name \r\n   * @param { function[] } callbacks the callbacks to remove\r\n   * @private\r\n   */\r\n  _offFrom(field, name, ...callbacks) {\r\n    let events = this[field];\r\n    if (callbacks.length <= 0) {\r\n      events[name] = [];\r\n      return;\r\n    }\r\n    events[name] = events[name] || [];\r\n    for (let i = 0; i < callbacks.length; ++i) {\r\n      let j = events[name].indexOf(callbacks[i]);\r\n      while (j !== -1) {\r\n        events[name].splice(j, 1);\r\n        j = events[name].indexOf(callbacks[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n /**\r\n   * Removes callbacks from an event.\r\n   * @param {string} name The name of the callback.\r\n   * @param {function[]} callbacks A list of callbacks to remove \r\n   * @warn If the list is empty it will remove all events.\r\n   */\r\n  off(name, ...callbacks) {\r\n    this._offFrom('_events', name, ...callbacks);\r\n  }\r\n  \r\n   /**\r\n   * Removes callbacks from an event.\r\n   * It only removes the one called for be called once.\r\n   * @param {string} name The name of the callback.\r\n   * @param {function[]} callbacks A list of callbacks to remove \r\n   * @warn If the list is empty it will remove all events.\r\n   */\r\n  offOnce(name, ...callbacks) {\r\n    this._offFrom('_once', name, ...callbacks);\r\n  }\r\n\r\n  /**\r\n   * Call events from a field \r\n   * @param {string} field The field name \r\n   * @param {string} name The event name \r\n   * @param { any[] } ...args The arguments to the callbacks.\r\n   * @private\r\n   */\r\n  _callEventsFrom(field, name, ...args) {\r\n    let events = this[field];\r\n    events[name] = events[name] || [];\r\n    let result = true;\r\n    let length = events[name].length;\r\n    for (let i = 0; i < length; ++i) {\r\n      let r = events[name][i](...args);\r\n      if ( (typeof r !== 'undefined') && !r ) {\r\n        result = false;\r\n      }\r\n    }\r\n    return result;    \r\n  }\r\n\r\n  /**\r\n   * Call all regular callbacks assigned to an event name\r\n   * @param {string} name The name of the callback.\r\n   * @param { any[]} ...args A list of arguments\r\n   * @returns false if any of the event's callbacks return false, true otherwise.\r\n   * @private\r\n   */\r\n  _callRegularEvents(name, ...args) {\r\n    return this._callEventsFrom('_events', name, ...args);\r\n  }\r\n\r\n  /**\r\n   * Call all once callbacks assigned to an event name\r\n   * @param {string} name The name of the callback.\r\n   * @param { any[]} ...args A list of arguments\r\n   * @returns false if any of the event's callbacks return false, true otherwise.\r\n   * @private\r\n   */\r\n  _callOnceEvents(name, ...args) {\r\n    let result = this._callEventsFrom('_once', name, ...args);\r\n    this._once[name] = [];\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Call all callbacks assigned to an event name\r\n   * @param {string} name The name of the callback.\r\n   * @param { any[]} ...args A list of arguments\r\n   * @returns false if any of the event's callbacks return false, true otherwise.\r\n   */\r\n  fire(name, ...args) {\r\n    return this._callRegularEvents(name, ...args) && this._callOnceEvents(name, ...args);\r\n  }\r\n  \r\n  /**\r\n   * Call all callbacks assigned to an event name\r\n   * @param {string} name The name of the callback.\r\n   * @param { any[]} ...args A list of arguments\r\n   * @returns false if any of the event's callbacks return false, true otherwise.\r\n   */  \r\n  emit(name, ...args) {\r\n    return this.fire(name, ...args);\r\n  }\r\n\r\n  /**\r\n   * Adds one or more callback to listen for an event.\r\n   * @param {string} name The name of the callback.\r\n   * @param {function[]} callbacks A list of callbacks to add\r\n   */\r\n  addEventListener(name, ...args) {\r\n    this.on(name, ...args);\r\n  }\r\n\r\n /**\r\n   * Removes callbacks from an event.\r\n   * @param {string} name The name of the callback.\r\n   * @param {function[]} callbacks A list of callbacks to remove \r\n   * @warn If the list is empty it will remove all events.\r\n   */\r\n  removeEventListener(name, ...args) {\r\n    this.off(name, ...args);\r\n  }\r\n\r\n}\r\n\r\nexport default EventManager;"]}